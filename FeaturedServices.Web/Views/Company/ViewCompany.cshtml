@model CompanyClientVM
@{
    int round = 0;
}
<style>
    #map {
        height: 200px;
        width: 100%;
    }
</style>
<br />
<div class="row">
    <div class="col-lg-7">
        <img src="~/image/@Model.ImageCompanyExposeVM.ImageName" class="d-block w-100 rounded" alt="@Model.ImageCompanyExposeVM.Title">
    </div>
    <div class="col-1"></div>
    <div class="col-lg-4 ">
        <div class="card bg-light text-dark  border-bottom" style="max-width: 35rem; border: none">
            <!--The div element for the map -->
            <div id="map"></div>
            <div class="card-body">
                <div class="alert alert-success" role="alert">
                    <p class="text-center mb-0 fw-bold fs-3">@Model.Name</p>
                    <p class="text-center mb-0">City <span class="fw-bolder">@Model.City</span>, street <span class="fw-bolder">@Model.StreetNameAndNumber</span></p>
                </div>
                <div class="row">
                    <div class="d-flex border-top pt-3 pb-3">
                        Employees:
                        @foreach (var worker in Model.WorkersVMs)
                        {
                            <span>&nbsp;@worker.Firstname @worker.Lastname &nbsp;</span>
                        }
                    </div>
                </div>
                <div class="row">
                    <div class="d-flex border-top pt-3 pb-3">
                        <div class="flex-grow-3 ms-2"><i class="fa-solid fa-phone align-middle fs-5"></i></div>
                        <div class="flex-grow-1 ms-2"><span class="flex-grow-1 align-middle">@Model.PhoneNumber</span></div>
                        <div class="flex-grow-2 mx-4"><a class="btn btn-sm btn-outline-success" type="button" href="tel:@Model.PhoneNumber">Make a Call</a></div>
                    </div>
                </div>
                <div class="row">
                    <div class="d-flex border-top pt-3 ">
                        <div class="flex-grow-1 mx-3"><span class="fw-bolder align-middle">Open Hours: </span></div>
                        <div class="flex-grow-2 mx-4"><span class="align-middle">@Model.OpeningHours.ToShortTimeString() - @Model.ClosingHours.ToShortTimeString()</span></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row mb-5">
    <div class="col-lg-7 col-md-10">
        <p class="fs-3">Services</p>
        <ul class="list-group list-group-flush">

            @foreach (var item in Model.ServicesWithWorkerVM)
            {
                round++;
                string target = "staticBackdrop";
                string btnCalendar = "btnCalendar";
                target += round;
                btnCalendar += item.Id;

                <li class="list-group-item">
                    <div class="row d-flex align-content-between mb-3">
                        <div class="col-9">
                            <span class="fs-5">@item.Name</span>
                        </div>
                        <div class="col-3">
                            <div class="row">
                                <div class="col-6">
                                    @item.Value$
                                    @item.Duration.ToShortTimeString()h
                                </div>
                                <div class="col-6">
                                    <button id="@item.Id" class="btn btn-outline-success btn-sm callendarView @btnCalendar" data-bs-toggle="modal" data-bs-target="#@target">Make an Appointment</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </li>
            }


        </ul>
    </div>
</div>



<div class="modal-area">
    @await Html.PartialAsync("_CallendarModal", Model)
</div>





@section Scripts{
    <script>

        const date = new Date();
        const maxDate = date.setMonth(date.getMonth() + 2);
        const startH = '@Model.OpeningHours.ToShortTimeString()';
        const endH = '@Model.ClosingHours.AddHours(-1).ToShortTimeString()';
        const companyId = @Model.Id;
        const partialUrl = 'https://localhost:7030/api/reservations/';
        const noServiceUrl = partialUrl + companyId.toString();

        let workerId;

        const appointmentBtn = document.querySelectorAll('.callendarView');
        let currentServiceBtn;

        let invalidDateArray = new Array();
        let invalidDate;
        let additionalDate;

        let datepickerSample = {
            controls: ['time'],
            timeFormat: 'HH:mm',
            controls: ['calendar', 'timegrid'],
            min: Date.now(),
            max: maxDate,
            minTime: startH,
            maxTime: endH,
            stepMinute: 30,
            display: 'inline',
            invalid: invalidDateArray
        }

        function addMinutes(dt, minutes) {
            const date = Date.parse(dt);
            return new Date(date + minutes * 60000);
        }
        //.staticBackdropX - modal X id serwisu
        async function getData(url) {
            const response = await fetch(url);
            const data = await response.json();

            data.forEach(item => {
                invalidDate = {
                    start: item.startTime,
                    end: item.endTime
                }
                datepickerSample.invalid.push(invalidDate);
                additionalDate = {
                    start: addMinutes(invalidDate.start, -30),
                    end: addMinutes(invalidDate.end, -29)
                }
                datepickerSample.invalid.push(additionalDate);
            });
        }

        appointmentBtn.forEach(button => {
            button.addEventListener('click', async e => {
                currentServiceBtn = e.target.id;

                const modalClass = '#staticBackdrop' + currentServiceBtn.toString();
                const modalEl = document.querySelector(modalClass);
                const checked = modalEl.querySelector('input[type=radio]:checked');
                const allRadioBtn = modalEl.querySelectorAll('input[type=radio]');

                let workerId = (checked.id).slice(11);
                //let url = noServiceUrl + '/' + currentServiceBtn.toString() + '/' + workerId;
                let url = noServiceUrl + '/' + workerId;
                datepickerSample.invalid = [];
                await getData(url);
                mobiscroll.datepicker('#calendar', datepickerSample);

                allRadioBtn.forEach(radio => {
                    radio.addEventListener('change', async e => {
                        workerId = (e.target.id).slice(11);
                        //url = noServiceUrl + '/' + currentServiceBtn.toString() + '/' + workerId;
                        url = noServiceUrl + '/' + workerId;
                        datepickerSample.invalid = [];
                        await getData(url);
                        mobiscroll.datepicker('#calendar', datepickerSample);
                    });
                });
            });
        });



    </script>















    @*<script>
        // Initialize and add the map
        function initMap() {
            // The location of Uluru
            const uluru = { lat: -25.344, lng: 131.031 };
            // The map, centered at Uluru
            const map = new google.maps.Map(document.getElementById("map"), {
                zoom: 4,
                center: uluru,
            });
            // The marker, positioned at Uluru
            const marker = new google.maps.Marker({
                position: uluru,
                map: map,
            });
        }

        window.initMap = initMap;
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB41DRUbKWJHPxaFjMAwdrzWzbVKartNGg&callback=initMap&v=weekly"
        defer></script>*@
    }